//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3620
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CodeGenerator.BL.DBReader.DS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SchemaReader")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SchemaReader : global::System.Data.DataSet {
        
        private EntitiesDataTable tableEntities;
        
        private FieldDefinitionsDataTable tableFieldDefinitions;
        
        private ChildRelationsDataTable tableChildRelations;
        
        private ForeignRelationsDataTable tableForeignRelations;
        
        private KeyInfoDataTable tableKeyInfo;
        
        private TABLE_CONSTRAINTSDataTable tableTABLE_CONSTRAINTS;
        
        private CONSTRAINT_COLUMN_USAGEDataTable tableCONSTRAINT_COLUMN_USAGE;
        
        private SCHEMATADataTable tableSCHEMATA;
        
        private DBObjPropertiesDataTable tableDBObjProperties;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SchemaReader() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SchemaReader(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Entities"] != null)) {
                    base.Tables.Add(new EntitiesDataTable(ds.Tables["Entities"]));
                }
                if ((ds.Tables["FieldDefinitions"] != null)) {
                    base.Tables.Add(new FieldDefinitionsDataTable(ds.Tables["FieldDefinitions"]));
                }
                if ((ds.Tables["ChildRelations"] != null)) {
                    base.Tables.Add(new ChildRelationsDataTable(ds.Tables["ChildRelations"]));
                }
                if ((ds.Tables["ForeignRelations"] != null)) {
                    base.Tables.Add(new ForeignRelationsDataTable(ds.Tables["ForeignRelations"]));
                }
                if ((ds.Tables["KeyInfo"] != null)) {
                    base.Tables.Add(new KeyInfoDataTable(ds.Tables["KeyInfo"]));
                }
                if ((ds.Tables["TABLE_CONSTRAINTS"] != null)) {
                    base.Tables.Add(new TABLE_CONSTRAINTSDataTable(ds.Tables["TABLE_CONSTRAINTS"]));
                }
                if ((ds.Tables["CONSTRAINT_COLUMN_USAGE"] != null)) {
                    base.Tables.Add(new CONSTRAINT_COLUMN_USAGEDataTable(ds.Tables["CONSTRAINT_COLUMN_USAGE"]));
                }
                if ((ds.Tables["SCHEMATA"] != null)) {
                    base.Tables.Add(new SCHEMATADataTable(ds.Tables["SCHEMATA"]));
                }
                if ((ds.Tables["DBObjProperties"] != null)) {
                    base.Tables.Add(new DBObjPropertiesDataTable(ds.Tables["DBObjProperties"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntitiesDataTable Entities {
            get {
                return this.tableEntities;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FieldDefinitionsDataTable FieldDefinitions {
            get {
                return this.tableFieldDefinitions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChildRelationsDataTable ChildRelations {
            get {
                return this.tableChildRelations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ForeignRelationsDataTable ForeignRelations {
            get {
                return this.tableForeignRelations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KeyInfoDataTable KeyInfo {
            get {
                return this.tableKeyInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TABLE_CONSTRAINTSDataTable TABLE_CONSTRAINTS {
            get {
                return this.tableTABLE_CONSTRAINTS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CONSTRAINT_COLUMN_USAGEDataTable CONSTRAINT_COLUMN_USAGE {
            get {
                return this.tableCONSTRAINT_COLUMN_USAGE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SCHEMATADataTable SCHEMATA {
            get {
                return this.tableSCHEMATA;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DBObjPropertiesDataTable DBObjProperties {
            get {
                return this.tableDBObjProperties;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SchemaReader cln = ((SchemaReader)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Entities"] != null)) {
                    base.Tables.Add(new EntitiesDataTable(ds.Tables["Entities"]));
                }
                if ((ds.Tables["FieldDefinitions"] != null)) {
                    base.Tables.Add(new FieldDefinitionsDataTable(ds.Tables["FieldDefinitions"]));
                }
                if ((ds.Tables["ChildRelations"] != null)) {
                    base.Tables.Add(new ChildRelationsDataTable(ds.Tables["ChildRelations"]));
                }
                if ((ds.Tables["ForeignRelations"] != null)) {
                    base.Tables.Add(new ForeignRelationsDataTable(ds.Tables["ForeignRelations"]));
                }
                if ((ds.Tables["KeyInfo"] != null)) {
                    base.Tables.Add(new KeyInfoDataTable(ds.Tables["KeyInfo"]));
                }
                if ((ds.Tables["TABLE_CONSTRAINTS"] != null)) {
                    base.Tables.Add(new TABLE_CONSTRAINTSDataTable(ds.Tables["TABLE_CONSTRAINTS"]));
                }
                if ((ds.Tables["CONSTRAINT_COLUMN_USAGE"] != null)) {
                    base.Tables.Add(new CONSTRAINT_COLUMN_USAGEDataTable(ds.Tables["CONSTRAINT_COLUMN_USAGE"]));
                }
                if ((ds.Tables["SCHEMATA"] != null)) {
                    base.Tables.Add(new SCHEMATADataTable(ds.Tables["SCHEMATA"]));
                }
                if ((ds.Tables["DBObjProperties"] != null)) {
                    base.Tables.Add(new DBObjPropertiesDataTable(ds.Tables["DBObjProperties"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEntities = ((EntitiesDataTable)(base.Tables["Entities"]));
            if ((initTable == true)) {
                if ((this.tableEntities != null)) {
                    this.tableEntities.InitVars();
                }
            }
            this.tableFieldDefinitions = ((FieldDefinitionsDataTable)(base.Tables["FieldDefinitions"]));
            if ((initTable == true)) {
                if ((this.tableFieldDefinitions != null)) {
                    this.tableFieldDefinitions.InitVars();
                }
            }
            this.tableChildRelations = ((ChildRelationsDataTable)(base.Tables["ChildRelations"]));
            if ((initTable == true)) {
                if ((this.tableChildRelations != null)) {
                    this.tableChildRelations.InitVars();
                }
            }
            this.tableForeignRelations = ((ForeignRelationsDataTable)(base.Tables["ForeignRelations"]));
            if ((initTable == true)) {
                if ((this.tableForeignRelations != null)) {
                    this.tableForeignRelations.InitVars();
                }
            }
            this.tableKeyInfo = ((KeyInfoDataTable)(base.Tables["KeyInfo"]));
            if ((initTable == true)) {
                if ((this.tableKeyInfo != null)) {
                    this.tableKeyInfo.InitVars();
                }
            }
            this.tableTABLE_CONSTRAINTS = ((TABLE_CONSTRAINTSDataTable)(base.Tables["TABLE_CONSTRAINTS"]));
            if ((initTable == true)) {
                if ((this.tableTABLE_CONSTRAINTS != null)) {
                    this.tableTABLE_CONSTRAINTS.InitVars();
                }
            }
            this.tableCONSTRAINT_COLUMN_USAGE = ((CONSTRAINT_COLUMN_USAGEDataTable)(base.Tables["CONSTRAINT_COLUMN_USAGE"]));
            if ((initTable == true)) {
                if ((this.tableCONSTRAINT_COLUMN_USAGE != null)) {
                    this.tableCONSTRAINT_COLUMN_USAGE.InitVars();
                }
            }
            this.tableSCHEMATA = ((SCHEMATADataTable)(base.Tables["SCHEMATA"]));
            if ((initTable == true)) {
                if ((this.tableSCHEMATA != null)) {
                    this.tableSCHEMATA.InitVars();
                }
            }
            this.tableDBObjProperties = ((DBObjPropertiesDataTable)(base.Tables["DBObjProperties"]));
            if ((initTable == true)) {
                if ((this.tableDBObjProperties != null)) {
                    this.tableDBObjProperties.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SchemaReader";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SchemaReader.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEntities = new EntitiesDataTable();
            base.Tables.Add(this.tableEntities);
            this.tableFieldDefinitions = new FieldDefinitionsDataTable();
            base.Tables.Add(this.tableFieldDefinitions);
            this.tableChildRelations = new ChildRelationsDataTable();
            base.Tables.Add(this.tableChildRelations);
            this.tableForeignRelations = new ForeignRelationsDataTable();
            base.Tables.Add(this.tableForeignRelations);
            this.tableKeyInfo = new KeyInfoDataTable();
            base.Tables.Add(this.tableKeyInfo);
            this.tableTABLE_CONSTRAINTS = new TABLE_CONSTRAINTSDataTable();
            base.Tables.Add(this.tableTABLE_CONSTRAINTS);
            this.tableCONSTRAINT_COLUMN_USAGE = new CONSTRAINT_COLUMN_USAGEDataTable();
            base.Tables.Add(this.tableCONSTRAINT_COLUMN_USAGE);
            this.tableSCHEMATA = new SCHEMATADataTable();
            base.Tables.Add(this.tableSCHEMATA);
            this.tableDBObjProperties = new DBObjPropertiesDataTable();
            base.Tables.Add(this.tableDBObjProperties);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEntities() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFieldDefinitions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeChildRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeForeignRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKeyInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTABLE_CONSTRAINTS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCONSTRAINT_COLUMN_USAGE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSCHEMATA() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDBObjProperties() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SchemaReader ds = new SchemaReader();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EntitiesRowChangeEventHandler(object sender, EntitiesRowChangeEvent e);
        
        public delegate void FieldDefinitionsRowChangeEventHandler(object sender, FieldDefinitionsRowChangeEvent e);
        
        public delegate void ChildRelationsRowChangeEventHandler(object sender, ChildRelationsRowChangeEvent e);
        
        public delegate void ForeignRelationsRowChangeEventHandler(object sender, ForeignRelationsRowChangeEvent e);
        
        public delegate void KeyInfoRowChangeEventHandler(object sender, KeyInfoRowChangeEvent e);
        
        public delegate void TABLE_CONSTRAINTSRowChangeEventHandler(object sender, TABLE_CONSTRAINTSRowChangeEvent e);
        
        public delegate void CONSTRAINT_COLUMN_USAGERowChangeEventHandler(object sender, CONSTRAINT_COLUMN_USAGERowChangeEvent e);
        
        public delegate void SCHEMATARowChangeEventHandler(object sender, SCHEMATARowChangeEvent e);
        
        public delegate void DBObjPropertiesRowChangeEventHandler(object sender, DBObjPropertiesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EntitiesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTABLE_CATALOG;
            
            private global::System.Data.DataColumn columnTABLE_SCHEMA;
            
            private global::System.Data.DataColumn columnTABLE_NAME;
            
            private global::System.Data.DataColumn columnTABLE_TYPE;
            
            private global::System.Data.DataColumn columnOBJECT_ID;
            
            private global::System.Data.DataColumn columnschemaname;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitiesDataTable() {
                this.TableName = "Entities";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntitiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EntitiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_CATALOGColumn {
                get {
                    return this.columnTABLE_CATALOG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_SCHEMAColumn {
                get {
                    return this.columnTABLE_SCHEMA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_NAMEColumn {
                get {
                    return this.columnTABLE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_TYPEColumn {
                get {
                    return this.columnTABLE_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OBJECT_IDColumn {
                get {
                    return this.columnOBJECT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn schemanameColumn {
                get {
                    return this.columnschemaname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitiesRow this[int index] {
                get {
                    return ((EntitiesRow)(this.Rows[index]));
                }
            }
            
            public event EntitiesRowChangeEventHandler EntitiesRowChanging;
            
            public event EntitiesRowChangeEventHandler EntitiesRowChanged;
            
            public event EntitiesRowChangeEventHandler EntitiesRowDeleting;
            
            public event EntitiesRowChangeEventHandler EntitiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEntitiesRow(EntitiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitiesRow AddEntitiesRow(string TABLE_CATALOG, string TABLE_SCHEMA, string TABLE_NAME, string TABLE_TYPE, string OBJECT_ID, string schemaname) {
                EntitiesRow rowEntitiesRow = ((EntitiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TABLE_CATALOG,
                        TABLE_SCHEMA,
                        TABLE_NAME,
                        TABLE_TYPE,
                        OBJECT_ID,
                        schemaname};
                rowEntitiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEntitiesRow);
                return rowEntitiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EntitiesDataTable cln = ((EntitiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EntitiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTABLE_CATALOG = base.Columns["TABLE_CATALOG"];
                this.columnTABLE_SCHEMA = base.Columns["TABLE_SCHEMA"];
                this.columnTABLE_NAME = base.Columns["TABLE_NAME"];
                this.columnTABLE_TYPE = base.Columns["TABLE_TYPE"];
                this.columnOBJECT_ID = base.Columns["OBJECT_ID"];
                this.columnschemaname = base.Columns["schemaname"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTABLE_CATALOG = new global::System.Data.DataColumn("TABLE_CATALOG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_CATALOG);
                this.columnTABLE_SCHEMA = new global::System.Data.DataColumn("TABLE_SCHEMA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_SCHEMA);
                this.columnTABLE_NAME = new global::System.Data.DataColumn("TABLE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_NAME);
                this.columnTABLE_TYPE = new global::System.Data.DataColumn("TABLE_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_TYPE);
                this.columnOBJECT_ID = new global::System.Data.DataColumn("OBJECT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOBJECT_ID);
                this.columnschemaname = new global::System.Data.DataColumn("schemaname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnschemaname);
                this.columnTABLE_CATALOG.ReadOnly = true;
                this.columnTABLE_CATALOG.MaxLength = 128;
                this.columnTABLE_SCHEMA.MaxLength = 128;
                this.columnTABLE_NAME.AllowDBNull = false;
                this.columnTABLE_NAME.MaxLength = 128;
                this.columnTABLE_TYPE.ReadOnly = true;
                this.columnTABLE_TYPE.MaxLength = 10;
                this.columnOBJECT_ID.ReadOnly = true;
                this.columnOBJECT_ID.MaxLength = 55;
                this.columnschemaname.ReadOnly = true;
                this.columnschemaname.MaxLength = 1024;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitiesRow NewEntitiesRow() {
                return ((EntitiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EntitiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EntitiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntitiesRowChanged != null)) {
                    this.EntitiesRowChanged(this, new EntitiesRowChangeEvent(((EntitiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntitiesRowChanging != null)) {
                    this.EntitiesRowChanging(this, new EntitiesRowChangeEvent(((EntitiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntitiesRowDeleted != null)) {
                    this.EntitiesRowDeleted(this, new EntitiesRowChangeEvent(((EntitiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntitiesRowDeleting != null)) {
                    this.EntitiesRowDeleting(this, new EntitiesRowChangeEvent(((EntitiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEntitiesRow(EntitiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SchemaReader ds = new SchemaReader();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EntitiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FieldDefinitionsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columntable_name;
            
            private global::System.Data.DataColumn columncolumn_name;
            
            private global::System.Data.DataColumn columnColumn_Default;
            
            private global::System.Data.DataColumn columnis_nullable;
            
            private global::System.Data.DataColumn columnData_type;
            
            private global::System.Data.DataColumn columnlength;
            
            private global::System.Data.DataColumn columnRelationship;
            
            private global::System.Data.DataColumn columncategory;
            
            private global::System.Data.DataColumn columnobject_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldDefinitionsDataTable() {
                this.TableName = "FieldDefinitions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FieldDefinitionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FieldDefinitionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn table_nameColumn {
                get {
                    return this.columntable_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn column_nameColumn {
                get {
                    return this.columncolumn_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Column_DefaultColumn {
                get {
                    return this.columnColumn_Default;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn is_nullableColumn {
                get {
                    return this.columnis_nullable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Data_typeColumn {
                get {
                    return this.columnData_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lengthColumn {
                get {
                    return this.columnlength;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RelationshipColumn {
                get {
                    return this.columnRelationship;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn categoryColumn {
                get {
                    return this.columncategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn object_idColumn {
                get {
                    return this.columnobject_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldDefinitionsRow this[int index] {
                get {
                    return ((FieldDefinitionsRow)(this.Rows[index]));
                }
            }
            
            public event FieldDefinitionsRowChangeEventHandler FieldDefinitionsRowChanging;
            
            public event FieldDefinitionsRowChangeEventHandler FieldDefinitionsRowChanged;
            
            public event FieldDefinitionsRowChangeEventHandler FieldDefinitionsRowDeleting;
            
            public event FieldDefinitionsRowChangeEventHandler FieldDefinitionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFieldDefinitionsRow(FieldDefinitionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldDefinitionsRow AddFieldDefinitionsRow(string table_name, string column_name, string Column_Default, string is_nullable, string Data_type, int length, string Relationship, string category, System.Guid object_id) {
                FieldDefinitionsRow rowFieldDefinitionsRow = ((FieldDefinitionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        table_name,
                        column_name,
                        Column_Default,
                        is_nullable,
                        Data_type,
                        length,
                        Relationship,
                        category,
                        object_id};
                rowFieldDefinitionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFieldDefinitionsRow);
                return rowFieldDefinitionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FieldDefinitionsDataTable cln = ((FieldDefinitionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FieldDefinitionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntable_name = base.Columns["table_name"];
                this.columncolumn_name = base.Columns["column_name"];
                this.columnColumn_Default = base.Columns["Column_Default"];
                this.columnis_nullable = base.Columns["is_nullable"];
                this.columnData_type = base.Columns["Data_type"];
                this.columnlength = base.Columns["length"];
                this.columnRelationship = base.Columns["Relationship"];
                this.columncategory = base.Columns["category"];
                this.columnobject_id = base.Columns["object_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntable_name = new global::System.Data.DataColumn("table_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntable_name);
                this.columncolumn_name = new global::System.Data.DataColumn("column_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncolumn_name);
                this.columnColumn_Default = new global::System.Data.DataColumn("Column_Default", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumn_Default);
                this.columnis_nullable = new global::System.Data.DataColumn("is_nullable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnis_nullable);
                this.columnData_type = new global::System.Data.DataColumn("Data_type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnData_type);
                this.columnlength = new global::System.Data.DataColumn("length", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlength);
                this.columnRelationship = new global::System.Data.DataColumn("Relationship", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelationship);
                this.columncategory = new global::System.Data.DataColumn("category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory);
                this.columnobject_id = new global::System.Data.DataColumn("object_id", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnobject_id);
                this.columntable_name.AllowDBNull = false;
                this.columntable_name.MaxLength = 128;
                this.columncolumn_name.MaxLength = 128;
                this.columnColumn_Default.ReadOnly = true;
                this.columnColumn_Default.MaxLength = 4000;
                this.columnis_nullable.ReadOnly = true;
                this.columnis_nullable.MaxLength = 3;
                this.columnData_type.ReadOnly = true;
                this.columnData_type.MaxLength = 128;
                this.columnlength.ReadOnly = true;
                this.columnRelationship.MaxLength = 128;
                this.columncategory.ReadOnly = true;
                this.columncategory.MaxLength = 128;
                this.columnobject_id.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldDefinitionsRow NewFieldDefinitionsRow() {
                return ((FieldDefinitionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FieldDefinitionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FieldDefinitionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FieldDefinitionsRowChanged != null)) {
                    this.FieldDefinitionsRowChanged(this, new FieldDefinitionsRowChangeEvent(((FieldDefinitionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FieldDefinitionsRowChanging != null)) {
                    this.FieldDefinitionsRowChanging(this, new FieldDefinitionsRowChangeEvent(((FieldDefinitionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FieldDefinitionsRowDeleted != null)) {
                    this.FieldDefinitionsRowDeleted(this, new FieldDefinitionsRowChangeEvent(((FieldDefinitionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FieldDefinitionsRowDeleting != null)) {
                    this.FieldDefinitionsRowDeleting(this, new FieldDefinitionsRowChangeEvent(((FieldDefinitionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFieldDefinitionsRow(FieldDefinitionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SchemaReader ds = new SchemaReader();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FieldDefinitionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ChildRelationsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFTable;
            
            private global::System.Data.DataColumn columnFCol;
            
            private global::System.Data.DataColumn columnRefTab;
            
            private global::System.Data.DataColumn columnRefCol;
            
            private global::System.Data.DataColumn columnisNullable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChildRelationsDataTable() {
                this.TableName = "ChildRelations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChildRelationsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ChildRelationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FTableColumn {
                get {
                    return this.columnFTable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FColColumn {
                get {
                    return this.columnFCol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefTabColumn {
                get {
                    return this.columnRefTab;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefColColumn {
                get {
                    return this.columnRefCol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isNullableColumn {
                get {
                    return this.columnisNullable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChildRelationsRow this[int index] {
                get {
                    return ((ChildRelationsRow)(this.Rows[index]));
                }
            }
            
            public event ChildRelationsRowChangeEventHandler ChildRelationsRowChanging;
            
            public event ChildRelationsRowChangeEventHandler ChildRelationsRowChanged;
            
            public event ChildRelationsRowChangeEventHandler ChildRelationsRowDeleting;
            
            public event ChildRelationsRowChangeEventHandler ChildRelationsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddChildRelationsRow(ChildRelationsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChildRelationsRow AddChildRelationsRow(string FTable, string FCol, string RefTab, string RefCol, int isNullable) {
                ChildRelationsRow rowChildRelationsRow = ((ChildRelationsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FTable,
                        FCol,
                        RefTab,
                        RefCol,
                        isNullable};
                rowChildRelationsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowChildRelationsRow);
                return rowChildRelationsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ChildRelationsDataTable cln = ((ChildRelationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ChildRelationsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFTable = base.Columns["FTable"];
                this.columnFCol = base.Columns["FCol"];
                this.columnRefTab = base.Columns["RefTab"];
                this.columnRefCol = base.Columns["RefCol"];
                this.columnisNullable = base.Columns["isNullable"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFTable = new global::System.Data.DataColumn("FTable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTable);
                this.columnFCol = new global::System.Data.DataColumn("FCol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFCol);
                this.columnRefTab = new global::System.Data.DataColumn("RefTab", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefTab);
                this.columnRefCol = new global::System.Data.DataColumn("RefCol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefCol);
                this.columnisNullable = new global::System.Data.DataColumn("isNullable", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisNullable);
                this.columnFTable.AllowDBNull = false;
                this.columnFTable.MaxLength = 128;
                this.columnFCol.MaxLength = 128;
                this.columnRefTab.AllowDBNull = false;
                this.columnRefTab.MaxLength = 128;
                this.columnRefCol.MaxLength = 128;
                this.columnisNullable.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChildRelationsRow NewChildRelationsRow() {
                return ((ChildRelationsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ChildRelationsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ChildRelationsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChildRelationsRowChanged != null)) {
                    this.ChildRelationsRowChanged(this, new ChildRelationsRowChangeEvent(((ChildRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChildRelationsRowChanging != null)) {
                    this.ChildRelationsRowChanging(this, new ChildRelationsRowChangeEvent(((ChildRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChildRelationsRowDeleted != null)) {
                    this.ChildRelationsRowDeleted(this, new ChildRelationsRowChangeEvent(((ChildRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChildRelationsRowDeleting != null)) {
                    this.ChildRelationsRowDeleting(this, new ChildRelationsRowChangeEvent(((ChildRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveChildRelationsRow(ChildRelationsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SchemaReader ds = new SchemaReader();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ChildRelationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ForeignRelationsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFTable;
            
            private global::System.Data.DataColumn columnFCol;
            
            private global::System.Data.DataColumn columnRefTab;
            
            private global::System.Data.DataColumn columnRefCol;
            
            private global::System.Data.DataColumn columnisNullable;
            
            private global::System.Data.DataColumn columnConstraintName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignRelationsDataTable() {
                this.TableName = "ForeignRelations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ForeignRelationsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ForeignRelationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FTableColumn {
                get {
                    return this.columnFTable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FColColumn {
                get {
                    return this.columnFCol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefTabColumn {
                get {
                    return this.columnRefTab;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RefColColumn {
                get {
                    return this.columnRefCol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isNullableColumn {
                get {
                    return this.columnisNullable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConstraintNameColumn {
                get {
                    return this.columnConstraintName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignRelationsRow this[int index] {
                get {
                    return ((ForeignRelationsRow)(this.Rows[index]));
                }
            }
            
            public event ForeignRelationsRowChangeEventHandler ForeignRelationsRowChanging;
            
            public event ForeignRelationsRowChangeEventHandler ForeignRelationsRowChanged;
            
            public event ForeignRelationsRowChangeEventHandler ForeignRelationsRowDeleting;
            
            public event ForeignRelationsRowChangeEventHandler ForeignRelationsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddForeignRelationsRow(ForeignRelationsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignRelationsRow AddForeignRelationsRow(string FTable, string FCol, string RefTab, string RefCol, int isNullable, string ConstraintName) {
                ForeignRelationsRow rowForeignRelationsRow = ((ForeignRelationsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FTable,
                        FCol,
                        RefTab,
                        RefCol,
                        isNullable,
                        ConstraintName};
                rowForeignRelationsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowForeignRelationsRow);
                return rowForeignRelationsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ForeignRelationsDataTable cln = ((ForeignRelationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ForeignRelationsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFTable = base.Columns["FTable"];
                this.columnFCol = base.Columns["FCol"];
                this.columnRefTab = base.Columns["RefTab"];
                this.columnRefCol = base.Columns["RefCol"];
                this.columnisNullable = base.Columns["isNullable"];
                this.columnConstraintName = base.Columns["ConstraintName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFTable = new global::System.Data.DataColumn("FTable", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFTable);
                this.columnFCol = new global::System.Data.DataColumn("FCol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFCol);
                this.columnRefTab = new global::System.Data.DataColumn("RefTab", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefTab);
                this.columnRefCol = new global::System.Data.DataColumn("RefCol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRefCol);
                this.columnisNullable = new global::System.Data.DataColumn("isNullable", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisNullable);
                this.columnConstraintName = new global::System.Data.DataColumn("ConstraintName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConstraintName);
                this.columnFTable.AllowDBNull = false;
                this.columnFTable.MaxLength = 128;
                this.columnFCol.MaxLength = 128;
                this.columnRefTab.AllowDBNull = false;
                this.columnRefTab.MaxLength = 128;
                this.columnRefCol.MaxLength = 128;
                this.columnisNullable.ReadOnly = true;
                this.columnConstraintName.AllowDBNull = false;
                this.columnConstraintName.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignRelationsRow NewForeignRelationsRow() {
                return ((ForeignRelationsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ForeignRelationsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ForeignRelationsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ForeignRelationsRowChanged != null)) {
                    this.ForeignRelationsRowChanged(this, new ForeignRelationsRowChangeEvent(((ForeignRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ForeignRelationsRowChanging != null)) {
                    this.ForeignRelationsRowChanging(this, new ForeignRelationsRowChangeEvent(((ForeignRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ForeignRelationsRowDeleted != null)) {
                    this.ForeignRelationsRowDeleted(this, new ForeignRelationsRowChangeEvent(((ForeignRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ForeignRelationsRowDeleting != null)) {
                    this.ForeignRelationsRowDeleting(this, new ForeignRelationsRowChangeEvent(((ForeignRelationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveForeignRelationsRow(ForeignRelationsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SchemaReader ds = new SchemaReader();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ForeignRelationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KeyInfoDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnid;
            
            private global::System.Data.DataColumn columnxtype;
            
            private global::System.Data.DataColumn columnparent_obj;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columnTableName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyInfoDataTable() {
                this.TableName = "KeyInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeyInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KeyInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idColumn {
                get {
                    return this.columnid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn xtypeColumn {
                get {
                    return this.columnxtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parent_objColumn {
                get {
                    return this.columnparent_obj;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TableNameColumn {
                get {
                    return this.columnTableName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyInfoRow this[int index] {
                get {
                    return ((KeyInfoRow)(this.Rows[index]));
                }
            }
            
            public event KeyInfoRowChangeEventHandler KeyInfoRowChanging;
            
            public event KeyInfoRowChangeEventHandler KeyInfoRowChanged;
            
            public event KeyInfoRowChangeEventHandler KeyInfoRowDeleting;
            
            public event KeyInfoRowChangeEventHandler KeyInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKeyInfoRow(KeyInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyInfoRow AddKeyInfoRow(string name, int id, string xtype, int parent_obj, string type, string TableName) {
                KeyInfoRow rowKeyInfoRow = ((KeyInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        name,
                        id,
                        xtype,
                        parent_obj,
                        type,
                        TableName};
                rowKeyInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKeyInfoRow);
                return rowKeyInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KeyInfoDataTable cln = ((KeyInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KeyInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnname = base.Columns["name"];
                this.columnid = base.Columns["id"];
                this.columnxtype = base.Columns["xtype"];
                this.columnparent_obj = base.Columns["parent_obj"];
                this.columntype = base.Columns["type"];
                this.columnTableName = base.Columns["TableName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnid = new global::System.Data.DataColumn("id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnid);
                this.columnxtype = new global::System.Data.DataColumn("xtype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnxtype);
                this.columnparent_obj = new global::System.Data.DataColumn("parent_obj", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparent_obj);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columnTableName = new global::System.Data.DataColumn("TableName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableName);
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 128;
                this.columnid.AllowDBNull = false;
                this.columnxtype.ReadOnly = true;
                this.columnxtype.MaxLength = 2;
                this.columnparent_obj.AllowDBNull = false;
                this.columntype.ReadOnly = true;
                this.columntype.MaxLength = 2;
                this.columnTableName.AllowDBNull = false;
                this.columnTableName.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyInfoRow NewKeyInfoRow() {
                return ((KeyInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KeyInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KeyInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KeyInfoRowChanged != null)) {
                    this.KeyInfoRowChanged(this, new KeyInfoRowChangeEvent(((KeyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KeyInfoRowChanging != null)) {
                    this.KeyInfoRowChanging(this, new KeyInfoRowChangeEvent(((KeyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KeyInfoRowDeleted != null)) {
                    this.KeyInfoRowDeleted(this, new KeyInfoRowChangeEvent(((KeyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KeyInfoRowDeleting != null)) {
                    this.KeyInfoRowDeleting(this, new KeyInfoRowChangeEvent(((KeyInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKeyInfoRow(KeyInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SchemaReader ds = new SchemaReader();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KeyInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TABLE_CONSTRAINTSDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCONSTRAINT_CATALOG;
            
            private global::System.Data.DataColumn columnCONSTRAINT_SCHEMA;
            
            private global::System.Data.DataColumn columnCONSTRAINT_NAME;
            
            private global::System.Data.DataColumn columnTABLE_CATALOG;
            
            private global::System.Data.DataColumn columnTABLE_SCHEMA;
            
            private global::System.Data.DataColumn columnTABLE_NAME;
            
            private global::System.Data.DataColumn columnCONSTRAINT_TYPE;
            
            private global::System.Data.DataColumn columnIS_DEFERRABLE;
            
            private global::System.Data.DataColumn columnINITIALLY_DEFERRED;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TABLE_CONSTRAINTSDataTable() {
                this.TableName = "TABLE_CONSTRAINTS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TABLE_CONSTRAINTSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TABLE_CONSTRAINTSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONSTRAINT_CATALOGColumn {
                get {
                    return this.columnCONSTRAINT_CATALOG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONSTRAINT_SCHEMAColumn {
                get {
                    return this.columnCONSTRAINT_SCHEMA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONSTRAINT_NAMEColumn {
                get {
                    return this.columnCONSTRAINT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_CATALOGColumn {
                get {
                    return this.columnTABLE_CATALOG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_SCHEMAColumn {
                get {
                    return this.columnTABLE_SCHEMA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_NAMEColumn {
                get {
                    return this.columnTABLE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONSTRAINT_TYPEColumn {
                get {
                    return this.columnCONSTRAINT_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IS_DEFERRABLEColumn {
                get {
                    return this.columnIS_DEFERRABLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INITIALLY_DEFERREDColumn {
                get {
                    return this.columnINITIALLY_DEFERRED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TABLE_CONSTRAINTSRow this[int index] {
                get {
                    return ((TABLE_CONSTRAINTSRow)(this.Rows[index]));
                }
            }
            
            public event TABLE_CONSTRAINTSRowChangeEventHandler TABLE_CONSTRAINTSRowChanging;
            
            public event TABLE_CONSTRAINTSRowChangeEventHandler TABLE_CONSTRAINTSRowChanged;
            
            public event TABLE_CONSTRAINTSRowChangeEventHandler TABLE_CONSTRAINTSRowDeleting;
            
            public event TABLE_CONSTRAINTSRowChangeEventHandler TABLE_CONSTRAINTSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTABLE_CONSTRAINTSRow(TABLE_CONSTRAINTSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TABLE_CONSTRAINTSRow AddTABLE_CONSTRAINTSRow(string CONSTRAINT_CATALOG, string CONSTRAINT_SCHEMA, string CONSTRAINT_NAME, string TABLE_CATALOG, string TABLE_SCHEMA, string TABLE_NAME, string CONSTRAINT_TYPE, string IS_DEFERRABLE, string INITIALLY_DEFERRED) {
                TABLE_CONSTRAINTSRow rowTABLE_CONSTRAINTSRow = ((TABLE_CONSTRAINTSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CONSTRAINT_CATALOG,
                        CONSTRAINT_SCHEMA,
                        CONSTRAINT_NAME,
                        TABLE_CATALOG,
                        TABLE_SCHEMA,
                        TABLE_NAME,
                        CONSTRAINT_TYPE,
                        IS_DEFERRABLE,
                        INITIALLY_DEFERRED};
                rowTABLE_CONSTRAINTSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTABLE_CONSTRAINTSRow);
                return rowTABLE_CONSTRAINTSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TABLE_CONSTRAINTSDataTable cln = ((TABLE_CONSTRAINTSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TABLE_CONSTRAINTSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCONSTRAINT_CATALOG = base.Columns["CONSTRAINT_CATALOG"];
                this.columnCONSTRAINT_SCHEMA = base.Columns["CONSTRAINT_SCHEMA"];
                this.columnCONSTRAINT_NAME = base.Columns["CONSTRAINT_NAME"];
                this.columnTABLE_CATALOG = base.Columns["TABLE_CATALOG"];
                this.columnTABLE_SCHEMA = base.Columns["TABLE_SCHEMA"];
                this.columnTABLE_NAME = base.Columns["TABLE_NAME"];
                this.columnCONSTRAINT_TYPE = base.Columns["CONSTRAINT_TYPE"];
                this.columnIS_DEFERRABLE = base.Columns["IS_DEFERRABLE"];
                this.columnINITIALLY_DEFERRED = base.Columns["INITIALLY_DEFERRED"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCONSTRAINT_CATALOG = new global::System.Data.DataColumn("CONSTRAINT_CATALOG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONSTRAINT_CATALOG);
                this.columnCONSTRAINT_SCHEMA = new global::System.Data.DataColumn("CONSTRAINT_SCHEMA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONSTRAINT_SCHEMA);
                this.columnCONSTRAINT_NAME = new global::System.Data.DataColumn("CONSTRAINT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONSTRAINT_NAME);
                this.columnTABLE_CATALOG = new global::System.Data.DataColumn("TABLE_CATALOG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_CATALOG);
                this.columnTABLE_SCHEMA = new global::System.Data.DataColumn("TABLE_SCHEMA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_SCHEMA);
                this.columnTABLE_NAME = new global::System.Data.DataColumn("TABLE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_NAME);
                this.columnCONSTRAINT_TYPE = new global::System.Data.DataColumn("CONSTRAINT_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONSTRAINT_TYPE);
                this.columnIS_DEFERRABLE = new global::System.Data.DataColumn("IS_DEFERRABLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIS_DEFERRABLE);
                this.columnINITIALLY_DEFERRED = new global::System.Data.DataColumn("INITIALLY_DEFERRED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINITIALLY_DEFERRED);
                this.columnCONSTRAINT_CATALOG.ReadOnly = true;
                this.columnCONSTRAINT_CATALOG.MaxLength = 128;
                this.columnCONSTRAINT_SCHEMA.ReadOnly = true;
                this.columnCONSTRAINT_SCHEMA.MaxLength = 128;
                this.columnCONSTRAINT_NAME.AllowDBNull = false;
                this.columnCONSTRAINT_NAME.MaxLength = 128;
                this.columnTABLE_CATALOG.ReadOnly = true;
                this.columnTABLE_CATALOG.MaxLength = 128;
                this.columnTABLE_SCHEMA.ReadOnly = true;
                this.columnTABLE_SCHEMA.MaxLength = 128;
                this.columnTABLE_NAME.MaxLength = 128;
                this.columnCONSTRAINT_TYPE.ReadOnly = true;
                this.columnCONSTRAINT_TYPE.MaxLength = 11;
                this.columnIS_DEFERRABLE.ReadOnly = true;
                this.columnIS_DEFERRABLE.MaxLength = 2;
                this.columnINITIALLY_DEFERRED.ReadOnly = true;
                this.columnINITIALLY_DEFERRED.MaxLength = 2;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TABLE_CONSTRAINTSRow NewTABLE_CONSTRAINTSRow() {
                return ((TABLE_CONSTRAINTSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TABLE_CONSTRAINTSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TABLE_CONSTRAINTSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TABLE_CONSTRAINTSRowChanged != null)) {
                    this.TABLE_CONSTRAINTSRowChanged(this, new TABLE_CONSTRAINTSRowChangeEvent(((TABLE_CONSTRAINTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TABLE_CONSTRAINTSRowChanging != null)) {
                    this.TABLE_CONSTRAINTSRowChanging(this, new TABLE_CONSTRAINTSRowChangeEvent(((TABLE_CONSTRAINTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TABLE_CONSTRAINTSRowDeleted != null)) {
                    this.TABLE_CONSTRAINTSRowDeleted(this, new TABLE_CONSTRAINTSRowChangeEvent(((TABLE_CONSTRAINTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TABLE_CONSTRAINTSRowDeleting != null)) {
                    this.TABLE_CONSTRAINTSRowDeleting(this, new TABLE_CONSTRAINTSRowChangeEvent(((TABLE_CONSTRAINTSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTABLE_CONSTRAINTSRow(TABLE_CONSTRAINTSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SchemaReader ds = new SchemaReader();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TABLE_CONSTRAINTSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CONSTRAINT_COLUMN_USAGEDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTABLE_CATALOG;
            
            private global::System.Data.DataColumn columnTABLE_SCHEMA;
            
            private global::System.Data.DataColumn columnTABLE_NAME;
            
            private global::System.Data.DataColumn columnCOLUMN_NAME;
            
            private global::System.Data.DataColumn columnCONSTRAINT_CATALOG;
            
            private global::System.Data.DataColumn columnCONSTRAINT_SCHEMA;
            
            private global::System.Data.DataColumn columnCONSTRAINT_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSTRAINT_COLUMN_USAGEDataTable() {
                this.TableName = "CONSTRAINT_COLUMN_USAGE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONSTRAINT_COLUMN_USAGEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CONSTRAINT_COLUMN_USAGEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_CATALOGColumn {
                get {
                    return this.columnTABLE_CATALOG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_SCHEMAColumn {
                get {
                    return this.columnTABLE_SCHEMA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TABLE_NAMEColumn {
                get {
                    return this.columnTABLE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COLUMN_NAMEColumn {
                get {
                    return this.columnCOLUMN_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONSTRAINT_CATALOGColumn {
                get {
                    return this.columnCONSTRAINT_CATALOG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONSTRAINT_SCHEMAColumn {
                get {
                    return this.columnCONSTRAINT_SCHEMA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONSTRAINT_NAMEColumn {
                get {
                    return this.columnCONSTRAINT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSTRAINT_COLUMN_USAGERow this[int index] {
                get {
                    return ((CONSTRAINT_COLUMN_USAGERow)(this.Rows[index]));
                }
            }
            
            public event CONSTRAINT_COLUMN_USAGERowChangeEventHandler CONSTRAINT_COLUMN_USAGERowChanging;
            
            public event CONSTRAINT_COLUMN_USAGERowChangeEventHandler CONSTRAINT_COLUMN_USAGERowChanged;
            
            public event CONSTRAINT_COLUMN_USAGERowChangeEventHandler CONSTRAINT_COLUMN_USAGERowDeleting;
            
            public event CONSTRAINT_COLUMN_USAGERowChangeEventHandler CONSTRAINT_COLUMN_USAGERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCONSTRAINT_COLUMN_USAGERow(CONSTRAINT_COLUMN_USAGERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSTRAINT_COLUMN_USAGERow AddCONSTRAINT_COLUMN_USAGERow(string TABLE_CATALOG, string TABLE_SCHEMA, string TABLE_NAME, string COLUMN_NAME, string CONSTRAINT_CATALOG, string CONSTRAINT_SCHEMA, string CONSTRAINT_NAME) {
                CONSTRAINT_COLUMN_USAGERow rowCONSTRAINT_COLUMN_USAGERow = ((CONSTRAINT_COLUMN_USAGERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TABLE_CATALOG,
                        TABLE_SCHEMA,
                        TABLE_NAME,
                        COLUMN_NAME,
                        CONSTRAINT_CATALOG,
                        CONSTRAINT_SCHEMA,
                        CONSTRAINT_NAME};
                rowCONSTRAINT_COLUMN_USAGERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCONSTRAINT_COLUMN_USAGERow);
                return rowCONSTRAINT_COLUMN_USAGERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CONSTRAINT_COLUMN_USAGEDataTable cln = ((CONSTRAINT_COLUMN_USAGEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CONSTRAINT_COLUMN_USAGEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTABLE_CATALOG = base.Columns["TABLE_CATALOG"];
                this.columnTABLE_SCHEMA = base.Columns["TABLE_SCHEMA"];
                this.columnTABLE_NAME = base.Columns["TABLE_NAME"];
                this.columnCOLUMN_NAME = base.Columns["COLUMN_NAME"];
                this.columnCONSTRAINT_CATALOG = base.Columns["CONSTRAINT_CATALOG"];
                this.columnCONSTRAINT_SCHEMA = base.Columns["CONSTRAINT_SCHEMA"];
                this.columnCONSTRAINT_NAME = base.Columns["CONSTRAINT_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTABLE_CATALOG = new global::System.Data.DataColumn("TABLE_CATALOG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_CATALOG);
                this.columnTABLE_SCHEMA = new global::System.Data.DataColumn("TABLE_SCHEMA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_SCHEMA);
                this.columnTABLE_NAME = new global::System.Data.DataColumn("TABLE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTABLE_NAME);
                this.columnCOLUMN_NAME = new global::System.Data.DataColumn("COLUMN_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOLUMN_NAME);
                this.columnCONSTRAINT_CATALOG = new global::System.Data.DataColumn("CONSTRAINT_CATALOG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONSTRAINT_CATALOG);
                this.columnCONSTRAINT_SCHEMA = new global::System.Data.DataColumn("CONSTRAINT_SCHEMA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONSTRAINT_SCHEMA);
                this.columnCONSTRAINT_NAME = new global::System.Data.DataColumn("CONSTRAINT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONSTRAINT_NAME);
                this.columnTABLE_CATALOG.MaxLength = 128;
                this.columnTABLE_SCHEMA.MaxLength = 128;
                this.columnTABLE_NAME.AllowDBNull = false;
                this.columnTABLE_NAME.MaxLength = 128;
                this.columnCOLUMN_NAME.MaxLength = 128;
                this.columnCONSTRAINT_CATALOG.MaxLength = 128;
                this.columnCONSTRAINT_SCHEMA.MaxLength = 128;
                this.columnCONSTRAINT_NAME.AllowDBNull = false;
                this.columnCONSTRAINT_NAME.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSTRAINT_COLUMN_USAGERow NewCONSTRAINT_COLUMN_USAGERow() {
                return ((CONSTRAINT_COLUMN_USAGERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CONSTRAINT_COLUMN_USAGERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CONSTRAINT_COLUMN_USAGERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CONSTRAINT_COLUMN_USAGERowChanged != null)) {
                    this.CONSTRAINT_COLUMN_USAGERowChanged(this, new CONSTRAINT_COLUMN_USAGERowChangeEvent(((CONSTRAINT_COLUMN_USAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CONSTRAINT_COLUMN_USAGERowChanging != null)) {
                    this.CONSTRAINT_COLUMN_USAGERowChanging(this, new CONSTRAINT_COLUMN_USAGERowChangeEvent(((CONSTRAINT_COLUMN_USAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CONSTRAINT_COLUMN_USAGERowDeleted != null)) {
                    this.CONSTRAINT_COLUMN_USAGERowDeleted(this, new CONSTRAINT_COLUMN_USAGERowChangeEvent(((CONSTRAINT_COLUMN_USAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CONSTRAINT_COLUMN_USAGERowDeleting != null)) {
                    this.CONSTRAINT_COLUMN_USAGERowDeleting(this, new CONSTRAINT_COLUMN_USAGERowChangeEvent(((CONSTRAINT_COLUMN_USAGERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCONSTRAINT_COLUMN_USAGERow(CONSTRAINT_COLUMN_USAGERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SchemaReader ds = new SchemaReader();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CONSTRAINT_COLUMN_USAGEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SCHEMATADataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCATALOG_NAME;
            
            private global::System.Data.DataColumn columnSCHEMA_NAME;
            
            private global::System.Data.DataColumn columnSCHEMA_OWNER;
            
            private global::System.Data.DataColumn columnDEFAULT_CHARACTER_SET_CATALOG;
            
            private global::System.Data.DataColumn columnDEFAULT_CHARACTER_SET_SCHEMA;
            
            private global::System.Data.DataColumn columnDEFAULT_CHARACTER_SET_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCHEMATADataTable() {
                this.TableName = "SCHEMATA";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SCHEMATADataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SCHEMATADataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATALOG_NAMEColumn {
                get {
                    return this.columnCATALOG_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCHEMA_NAMEColumn {
                get {
                    return this.columnSCHEMA_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCHEMA_OWNERColumn {
                get {
                    return this.columnSCHEMA_OWNER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEFAULT_CHARACTER_SET_CATALOGColumn {
                get {
                    return this.columnDEFAULT_CHARACTER_SET_CATALOG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEFAULT_CHARACTER_SET_SCHEMAColumn {
                get {
                    return this.columnDEFAULT_CHARACTER_SET_SCHEMA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEFAULT_CHARACTER_SET_NAMEColumn {
                get {
                    return this.columnDEFAULT_CHARACTER_SET_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCHEMATARow this[int index] {
                get {
                    return ((SCHEMATARow)(this.Rows[index]));
                }
            }
            
            public event SCHEMATARowChangeEventHandler SCHEMATARowChanging;
            
            public event SCHEMATARowChangeEventHandler SCHEMATARowChanged;
            
            public event SCHEMATARowChangeEventHandler SCHEMATARowDeleting;
            
            public event SCHEMATARowChangeEventHandler SCHEMATARowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSCHEMATARow(SCHEMATARow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCHEMATARow AddSCHEMATARow(string CATALOG_NAME, string SCHEMA_NAME, string SCHEMA_OWNER, string DEFAULT_CHARACTER_SET_CATALOG, string DEFAULT_CHARACTER_SET_SCHEMA, string DEFAULT_CHARACTER_SET_NAME) {
                SCHEMATARow rowSCHEMATARow = ((SCHEMATARow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CATALOG_NAME,
                        SCHEMA_NAME,
                        SCHEMA_OWNER,
                        DEFAULT_CHARACTER_SET_CATALOG,
                        DEFAULT_CHARACTER_SET_SCHEMA,
                        DEFAULT_CHARACTER_SET_NAME};
                rowSCHEMATARow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSCHEMATARow);
                return rowSCHEMATARow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SCHEMATADataTable cln = ((SCHEMATADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SCHEMATADataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCATALOG_NAME = base.Columns["CATALOG_NAME"];
                this.columnSCHEMA_NAME = base.Columns["SCHEMA_NAME"];
                this.columnSCHEMA_OWNER = base.Columns["SCHEMA_OWNER"];
                this.columnDEFAULT_CHARACTER_SET_CATALOG = base.Columns["DEFAULT_CHARACTER_SET_CATALOG"];
                this.columnDEFAULT_CHARACTER_SET_SCHEMA = base.Columns["DEFAULT_CHARACTER_SET_SCHEMA"];
                this.columnDEFAULT_CHARACTER_SET_NAME = base.Columns["DEFAULT_CHARACTER_SET_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCATALOG_NAME = new global::System.Data.DataColumn("CATALOG_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATALOG_NAME);
                this.columnSCHEMA_NAME = new global::System.Data.DataColumn("SCHEMA_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCHEMA_NAME);
                this.columnSCHEMA_OWNER = new global::System.Data.DataColumn("SCHEMA_OWNER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCHEMA_OWNER);
                this.columnDEFAULT_CHARACTER_SET_CATALOG = new global::System.Data.DataColumn("DEFAULT_CHARACTER_SET_CATALOG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEFAULT_CHARACTER_SET_CATALOG);
                this.columnDEFAULT_CHARACTER_SET_SCHEMA = new global::System.Data.DataColumn("DEFAULT_CHARACTER_SET_SCHEMA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEFAULT_CHARACTER_SET_SCHEMA);
                this.columnDEFAULT_CHARACTER_SET_NAME = new global::System.Data.DataColumn("DEFAULT_CHARACTER_SET_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEFAULT_CHARACTER_SET_NAME);
                this.columnCATALOG_NAME.ReadOnly = true;
                this.columnCATALOG_NAME.MaxLength = 128;
                this.columnSCHEMA_NAME.AllowDBNull = false;
                this.columnSCHEMA_NAME.MaxLength = 128;
                this.columnSCHEMA_OWNER.ReadOnly = true;
                this.columnSCHEMA_OWNER.MaxLength = 128;
                this.columnDEFAULT_CHARACTER_SET_CATALOG.ReadOnly = true;
                this.columnDEFAULT_CHARACTER_SET_CATALOG.MaxLength = 128;
                this.columnDEFAULT_CHARACTER_SET_SCHEMA.ReadOnly = true;
                this.columnDEFAULT_CHARACTER_SET_SCHEMA.MaxLength = 128;
                this.columnDEFAULT_CHARACTER_SET_NAME.ReadOnly = true;
                this.columnDEFAULT_CHARACTER_SET_NAME.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCHEMATARow NewSCHEMATARow() {
                return ((SCHEMATARow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SCHEMATARow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SCHEMATARow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SCHEMATARowChanged != null)) {
                    this.SCHEMATARowChanged(this, new SCHEMATARowChangeEvent(((SCHEMATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SCHEMATARowChanging != null)) {
                    this.SCHEMATARowChanging(this, new SCHEMATARowChangeEvent(((SCHEMATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SCHEMATARowDeleted != null)) {
                    this.SCHEMATARowDeleted(this, new SCHEMATARowChangeEvent(((SCHEMATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SCHEMATARowDeleting != null)) {
                    this.SCHEMATARowDeleting(this, new SCHEMATARowChangeEvent(((SCHEMATARow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSCHEMATARow(SCHEMATARow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SchemaReader ds = new SchemaReader();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SCHEMATADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DBObjPropertiesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnobjtype;
            
            private global::System.Data.DataColumn columnobjname;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnvalue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBObjPropertiesDataTable() {
                this.TableName = "DBObjProperties";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DBObjPropertiesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DBObjPropertiesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn objtypeColumn {
                get {
                    return this.columnobjtype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn objnameColumn {
                get {
                    return this.columnobjname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn valueColumn {
                get {
                    return this.columnvalue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBObjPropertiesRow this[int index] {
                get {
                    return ((DBObjPropertiesRow)(this.Rows[index]));
                }
            }
            
            public event DBObjPropertiesRowChangeEventHandler DBObjPropertiesRowChanging;
            
            public event DBObjPropertiesRowChangeEventHandler DBObjPropertiesRowChanged;
            
            public event DBObjPropertiesRowChangeEventHandler DBObjPropertiesRowDeleting;
            
            public event DBObjPropertiesRowChangeEventHandler DBObjPropertiesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDBObjPropertiesRow(DBObjPropertiesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBObjPropertiesRow AddDBObjPropertiesRow(string objtype, string objname, string name, object value) {
                DBObjPropertiesRow rowDBObjPropertiesRow = ((DBObjPropertiesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        objtype,
                        objname,
                        name,
                        value};
                rowDBObjPropertiesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDBObjPropertiesRow);
                return rowDBObjPropertiesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DBObjPropertiesDataTable cln = ((DBObjPropertiesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DBObjPropertiesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnobjtype = base.Columns["objtype"];
                this.columnobjname = base.Columns["objname"];
                this.columnname = base.Columns["name"];
                this.columnvalue = base.Columns["value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnobjtype = new global::System.Data.DataColumn("objtype", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnobjtype);
                this.columnobjname = new global::System.Data.DataColumn("objname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnobjname);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnvalue = new global::System.Data.DataColumn("value", typeof(object), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnvalue);
                this.columnobjtype.MaxLength = 128;
                this.columnobjname.MaxLength = 128;
                this.columnname.AllowDBNull = false;
                this.columnname.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBObjPropertiesRow NewDBObjPropertiesRow() {
                return ((DBObjPropertiesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DBObjPropertiesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DBObjPropertiesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DBObjPropertiesRowChanged != null)) {
                    this.DBObjPropertiesRowChanged(this, new DBObjPropertiesRowChangeEvent(((DBObjPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DBObjPropertiesRowChanging != null)) {
                    this.DBObjPropertiesRowChanging(this, new DBObjPropertiesRowChangeEvent(((DBObjPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DBObjPropertiesRowDeleted != null)) {
                    this.DBObjPropertiesRowDeleted(this, new DBObjPropertiesRowChangeEvent(((DBObjPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DBObjPropertiesRowDeleting != null)) {
                    this.DBObjPropertiesRowDeleting(this, new DBObjPropertiesRowChangeEvent(((DBObjPropertiesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDBObjPropertiesRow(DBObjPropertiesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SchemaReader ds = new SchemaReader();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DBObjPropertiesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EntitiesRow : global::System.Data.DataRow {
            
            private EntitiesDataTable tableEntities;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntitiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntities = ((EntitiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_CATALOG {
                get {
                    try {
                        return ((string)(this[this.tableEntities.TABLE_CATALOGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TABLE_CATALOG\' in table \'Entities\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntities.TABLE_CATALOGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_SCHEMA {
                get {
                    try {
                        return ((string)(this[this.tableEntities.TABLE_SCHEMAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TABLE_SCHEMA\' in table \'Entities\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntities.TABLE_SCHEMAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_NAME {
                get {
                    return ((string)(this[this.tableEntities.TABLE_NAMEColumn]));
                }
                set {
                    this[this.tableEntities.TABLE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableEntities.TABLE_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TABLE_TYPE\' in table \'Entities\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntities.TABLE_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OBJECT_ID {
                get {
                    try {
                        return ((string)(this[this.tableEntities.OBJECT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OBJECT_ID\' in table \'Entities\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntities.OBJECT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string schemaname {
                get {
                    try {
                        return ((string)(this[this.tableEntities.schemanameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'schemaname\' in table \'Entities\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntities.schemanameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTABLE_CATALOGNull() {
                return this.IsNull(this.tableEntities.TABLE_CATALOGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTABLE_CATALOGNull() {
                this[this.tableEntities.TABLE_CATALOGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTABLE_SCHEMANull() {
                return this.IsNull(this.tableEntities.TABLE_SCHEMAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTABLE_SCHEMANull() {
                this[this.tableEntities.TABLE_SCHEMAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTABLE_TYPENull() {
                return this.IsNull(this.tableEntities.TABLE_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTABLE_TYPENull() {
                this[this.tableEntities.TABLE_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOBJECT_IDNull() {
                return this.IsNull(this.tableEntities.OBJECT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOBJECT_IDNull() {
                this[this.tableEntities.OBJECT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsschemanameNull() {
                return this.IsNull(this.tableEntities.schemanameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetschemanameNull() {
                this[this.tableEntities.schemanameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FieldDefinitionsRow : global::System.Data.DataRow {
            
            private FieldDefinitionsDataTable tableFieldDefinitions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FieldDefinitionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFieldDefinitions = ((FieldDefinitionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string table_name {
                get {
                    return ((string)(this[this.tableFieldDefinitions.table_nameColumn]));
                }
                set {
                    this[this.tableFieldDefinitions.table_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string column_name {
                get {
                    try {
                        return ((string)(this[this.tableFieldDefinitions.column_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'column_name\' in table \'FieldDefinitions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFieldDefinitions.column_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Column_Default {
                get {
                    try {
                        return ((string)(this[this.tableFieldDefinitions.Column_DefaultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Column_Default\' in table \'FieldDefinitions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFieldDefinitions.Column_DefaultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string is_nullable {
                get {
                    try {
                        return ((string)(this[this.tableFieldDefinitions.is_nullableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'is_nullable\' in table \'FieldDefinitions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFieldDefinitions.is_nullableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Data_type {
                get {
                    try {
                        return ((string)(this[this.tableFieldDefinitions.Data_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Data_type\' in table \'FieldDefinitions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFieldDefinitions.Data_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int length {
                get {
                    try {
                        return ((int)(this[this.tableFieldDefinitions.lengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'length\' in table \'FieldDefinitions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFieldDefinitions.lengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Relationship {
                get {
                    try {
                        return ((string)(this[this.tableFieldDefinitions.RelationshipColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Relationship\' in table \'FieldDefinitions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFieldDefinitions.RelationshipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string category {
                get {
                    try {
                        return ((string)(this[this.tableFieldDefinitions.categoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category\' in table \'FieldDefinitions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFieldDefinitions.categoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid object_id {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableFieldDefinitions.object_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'object_id\' in table \'FieldDefinitions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFieldDefinitions.object_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscolumn_nameNull() {
                return this.IsNull(this.tableFieldDefinitions.column_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcolumn_nameNull() {
                this[this.tableFieldDefinitions.column_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsColumn_DefaultNull() {
                return this.IsNull(this.tableFieldDefinitions.Column_DefaultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetColumn_DefaultNull() {
                this[this.tableFieldDefinitions.Column_DefaultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isis_nullableNull() {
                return this.IsNull(this.tableFieldDefinitions.is_nullableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setis_nullableNull() {
                this[this.tableFieldDefinitions.is_nullableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsData_typeNull() {
                return this.IsNull(this.tableFieldDefinitions.Data_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetData_typeNull() {
                this[this.tableFieldDefinitions.Data_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslengthNull() {
                return this.IsNull(this.tableFieldDefinitions.lengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlengthNull() {
                this[this.tableFieldDefinitions.lengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelationshipNull() {
                return this.IsNull(this.tableFieldDefinitions.RelationshipColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelationshipNull() {
                this[this.tableFieldDefinitions.RelationshipColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscategoryNull() {
                return this.IsNull(this.tableFieldDefinitions.categoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcategoryNull() {
                this[this.tableFieldDefinitions.categoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isobject_idNull() {
                return this.IsNull(this.tableFieldDefinitions.object_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setobject_idNull() {
                this[this.tableFieldDefinitions.object_idColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ChildRelationsRow : global::System.Data.DataRow {
            
            private ChildRelationsDataTable tableChildRelations;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChildRelationsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableChildRelations = ((ChildRelationsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FTable {
                get {
                    return ((string)(this[this.tableChildRelations.FTableColumn]));
                }
                set {
                    this[this.tableChildRelations.FTableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FCol {
                get {
                    try {
                        return ((string)(this[this.tableChildRelations.FColColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FCol\' in table \'ChildRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChildRelations.FColColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RefTab {
                get {
                    return ((string)(this[this.tableChildRelations.RefTabColumn]));
                }
                set {
                    this[this.tableChildRelations.RefTabColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RefCol {
                get {
                    try {
                        return ((string)(this[this.tableChildRelations.RefColColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefCol\' in table \'ChildRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChildRelations.RefColColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int isNullable {
                get {
                    try {
                        return ((int)(this[this.tableChildRelations.isNullableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isNullable\' in table \'ChildRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChildRelations.isNullableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFColNull() {
                return this.IsNull(this.tableChildRelations.FColColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFColNull() {
                this[this.tableChildRelations.FColColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefColNull() {
                return this.IsNull(this.tableChildRelations.RefColColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefColNull() {
                this[this.tableChildRelations.RefColColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisNullableNull() {
                return this.IsNull(this.tableChildRelations.isNullableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisNullableNull() {
                this[this.tableChildRelations.isNullableColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ForeignRelationsRow : global::System.Data.DataRow {
            
            private ForeignRelationsDataTable tableForeignRelations;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ForeignRelationsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableForeignRelations = ((ForeignRelationsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FTable {
                get {
                    return ((string)(this[this.tableForeignRelations.FTableColumn]));
                }
                set {
                    this[this.tableForeignRelations.FTableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FCol {
                get {
                    try {
                        return ((string)(this[this.tableForeignRelations.FColColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FCol\' in table \'ForeignRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForeignRelations.FColColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RefTab {
                get {
                    return ((string)(this[this.tableForeignRelations.RefTabColumn]));
                }
                set {
                    this[this.tableForeignRelations.RefTabColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RefCol {
                get {
                    try {
                        return ((string)(this[this.tableForeignRelations.RefColColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RefCol\' in table \'ForeignRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForeignRelations.RefColColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int isNullable {
                get {
                    try {
                        return ((int)(this[this.tableForeignRelations.isNullableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isNullable\' in table \'ForeignRelations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForeignRelations.isNullableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConstraintName {
                get {
                    return ((string)(this[this.tableForeignRelations.ConstraintNameColumn]));
                }
                set {
                    this[this.tableForeignRelations.ConstraintNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFColNull() {
                return this.IsNull(this.tableForeignRelations.FColColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFColNull() {
                this[this.tableForeignRelations.FColColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRefColNull() {
                return this.IsNull(this.tableForeignRelations.RefColColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRefColNull() {
                this[this.tableForeignRelations.RefColColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisNullableNull() {
                return this.IsNull(this.tableForeignRelations.isNullableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisNullableNull() {
                this[this.tableForeignRelations.isNullableColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KeyInfoRow : global::System.Data.DataRow {
            
            private KeyInfoDataTable tableKeyInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KeyInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKeyInfo = ((KeyInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableKeyInfo.nameColumn]));
                }
                set {
                    this[this.tableKeyInfo.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int id {
                get {
                    return ((int)(this[this.tableKeyInfo.idColumn]));
                }
                set {
                    this[this.tableKeyInfo.idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string xtype {
                get {
                    try {
                        return ((string)(this[this.tableKeyInfo.xtypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'xtype\' in table \'KeyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKeyInfo.xtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int parent_obj {
                get {
                    return ((int)(this[this.tableKeyInfo.parent_objColumn]));
                }
                set {
                    this[this.tableKeyInfo.parent_objColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableKeyInfo.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type\' in table \'KeyInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableKeyInfo.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableName {
                get {
                    return ((string)(this[this.tableKeyInfo.TableNameColumn]));
                }
                set {
                    this[this.tableKeyInfo.TableNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsxtypeNull() {
                return this.IsNull(this.tableKeyInfo.xtypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetxtypeNull() {
                this[this.tableKeyInfo.xtypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableKeyInfo.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableKeyInfo.typeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TABLE_CONSTRAINTSRow : global::System.Data.DataRow {
            
            private TABLE_CONSTRAINTSDataTable tableTABLE_CONSTRAINTS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TABLE_CONSTRAINTSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTABLE_CONSTRAINTS = ((TABLE_CONSTRAINTSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONSTRAINT_CATALOG {
                get {
                    try {
                        return ((string)(this[this.tableTABLE_CONSTRAINTS.CONSTRAINT_CATALOGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONSTRAINT_CATALOG\' in table \'TABLE_CONSTRAINTS\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTABLE_CONSTRAINTS.CONSTRAINT_CATALOGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONSTRAINT_SCHEMA {
                get {
                    try {
                        return ((string)(this[this.tableTABLE_CONSTRAINTS.CONSTRAINT_SCHEMAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONSTRAINT_SCHEMA\' in table \'TABLE_CONSTRAINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTABLE_CONSTRAINTS.CONSTRAINT_SCHEMAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONSTRAINT_NAME {
                get {
                    return ((string)(this[this.tableTABLE_CONSTRAINTS.CONSTRAINT_NAMEColumn]));
                }
                set {
                    this[this.tableTABLE_CONSTRAINTS.CONSTRAINT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_CATALOG {
                get {
                    try {
                        return ((string)(this[this.tableTABLE_CONSTRAINTS.TABLE_CATALOGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TABLE_CATALOG\' in table \'TABLE_CONSTRAINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTABLE_CONSTRAINTS.TABLE_CATALOGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_SCHEMA {
                get {
                    try {
                        return ((string)(this[this.tableTABLE_CONSTRAINTS.TABLE_SCHEMAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TABLE_SCHEMA\' in table \'TABLE_CONSTRAINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTABLE_CONSTRAINTS.TABLE_SCHEMAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableTABLE_CONSTRAINTS.TABLE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TABLE_NAME\' in table \'TABLE_CONSTRAINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTABLE_CONSTRAINTS.TABLE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONSTRAINT_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableTABLE_CONSTRAINTS.CONSTRAINT_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONSTRAINT_TYPE\' in table \'TABLE_CONSTRAINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTABLE_CONSTRAINTS.CONSTRAINT_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IS_DEFERRABLE {
                get {
                    try {
                        return ((string)(this[this.tableTABLE_CONSTRAINTS.IS_DEFERRABLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IS_DEFERRABLE\' in table \'TABLE_CONSTRAINTS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTABLE_CONSTRAINTS.IS_DEFERRABLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INITIALLY_DEFERRED {
                get {
                    try {
                        return ((string)(this[this.tableTABLE_CONSTRAINTS.INITIALLY_DEFERREDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INITIALLY_DEFERRED\' in table \'TABLE_CONSTRAINTS\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableTABLE_CONSTRAINTS.INITIALLY_DEFERREDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONSTRAINT_CATALOGNull() {
                return this.IsNull(this.tableTABLE_CONSTRAINTS.CONSTRAINT_CATALOGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONSTRAINT_CATALOGNull() {
                this[this.tableTABLE_CONSTRAINTS.CONSTRAINT_CATALOGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONSTRAINT_SCHEMANull() {
                return this.IsNull(this.tableTABLE_CONSTRAINTS.CONSTRAINT_SCHEMAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONSTRAINT_SCHEMANull() {
                this[this.tableTABLE_CONSTRAINTS.CONSTRAINT_SCHEMAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTABLE_CATALOGNull() {
                return this.IsNull(this.tableTABLE_CONSTRAINTS.TABLE_CATALOGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTABLE_CATALOGNull() {
                this[this.tableTABLE_CONSTRAINTS.TABLE_CATALOGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTABLE_SCHEMANull() {
                return this.IsNull(this.tableTABLE_CONSTRAINTS.TABLE_SCHEMAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTABLE_SCHEMANull() {
                this[this.tableTABLE_CONSTRAINTS.TABLE_SCHEMAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTABLE_NAMENull() {
                return this.IsNull(this.tableTABLE_CONSTRAINTS.TABLE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTABLE_NAMENull() {
                this[this.tableTABLE_CONSTRAINTS.TABLE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONSTRAINT_TYPENull() {
                return this.IsNull(this.tableTABLE_CONSTRAINTS.CONSTRAINT_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONSTRAINT_TYPENull() {
                this[this.tableTABLE_CONSTRAINTS.CONSTRAINT_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIS_DEFERRABLENull() {
                return this.IsNull(this.tableTABLE_CONSTRAINTS.IS_DEFERRABLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIS_DEFERRABLENull() {
                this[this.tableTABLE_CONSTRAINTS.IS_DEFERRABLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINITIALLY_DEFERREDNull() {
                return this.IsNull(this.tableTABLE_CONSTRAINTS.INITIALLY_DEFERREDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINITIALLY_DEFERREDNull() {
                this[this.tableTABLE_CONSTRAINTS.INITIALLY_DEFERREDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CONSTRAINT_COLUMN_USAGERow : global::System.Data.DataRow {
            
            private CONSTRAINT_COLUMN_USAGEDataTable tableCONSTRAINT_COLUMN_USAGE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONSTRAINT_COLUMN_USAGERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCONSTRAINT_COLUMN_USAGE = ((CONSTRAINT_COLUMN_USAGEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_CATALOG {
                get {
                    try {
                        return ((string)(this[this.tableCONSTRAINT_COLUMN_USAGE.TABLE_CATALOGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TABLE_CATALOG\' in table \'CONSTRAINT_COLUMN_USAGE\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableCONSTRAINT_COLUMN_USAGE.TABLE_CATALOGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_SCHEMA {
                get {
                    try {
                        return ((string)(this[this.tableCONSTRAINT_COLUMN_USAGE.TABLE_SCHEMAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TABLE_SCHEMA\' in table \'CONSTRAINT_COLUMN_USAGE\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableCONSTRAINT_COLUMN_USAGE.TABLE_SCHEMAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TABLE_NAME {
                get {
                    return ((string)(this[this.tableCONSTRAINT_COLUMN_USAGE.TABLE_NAMEColumn]));
                }
                set {
                    this[this.tableCONSTRAINT_COLUMN_USAGE.TABLE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COLUMN_NAME {
                get {
                    try {
                        return ((string)(this[this.tableCONSTRAINT_COLUMN_USAGE.COLUMN_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COLUMN_NAME\' in table \'CONSTRAINT_COLUMN_USAGE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONSTRAINT_COLUMN_USAGE.COLUMN_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONSTRAINT_CATALOG {
                get {
                    try {
                        return ((string)(this[this.tableCONSTRAINT_COLUMN_USAGE.CONSTRAINT_CATALOGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONSTRAINT_CATALOG\' in table \'CONSTRAINT_COLUMN_USAGE\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableCONSTRAINT_COLUMN_USAGE.CONSTRAINT_CATALOGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONSTRAINT_SCHEMA {
                get {
                    try {
                        return ((string)(this[this.tableCONSTRAINT_COLUMN_USAGE.CONSTRAINT_SCHEMAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONSTRAINT_SCHEMA\' in table \'CONSTRAINT_COLUMN_USAGE\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableCONSTRAINT_COLUMN_USAGE.CONSTRAINT_SCHEMAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONSTRAINT_NAME {
                get {
                    return ((string)(this[this.tableCONSTRAINT_COLUMN_USAGE.CONSTRAINT_NAMEColumn]));
                }
                set {
                    this[this.tableCONSTRAINT_COLUMN_USAGE.CONSTRAINT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTABLE_CATALOGNull() {
                return this.IsNull(this.tableCONSTRAINT_COLUMN_USAGE.TABLE_CATALOGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTABLE_CATALOGNull() {
                this[this.tableCONSTRAINT_COLUMN_USAGE.TABLE_CATALOGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTABLE_SCHEMANull() {
                return this.IsNull(this.tableCONSTRAINT_COLUMN_USAGE.TABLE_SCHEMAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTABLE_SCHEMANull() {
                this[this.tableCONSTRAINT_COLUMN_USAGE.TABLE_SCHEMAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOLUMN_NAMENull() {
                return this.IsNull(this.tableCONSTRAINT_COLUMN_USAGE.COLUMN_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOLUMN_NAMENull() {
                this[this.tableCONSTRAINT_COLUMN_USAGE.COLUMN_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONSTRAINT_CATALOGNull() {
                return this.IsNull(this.tableCONSTRAINT_COLUMN_USAGE.CONSTRAINT_CATALOGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONSTRAINT_CATALOGNull() {
                this[this.tableCONSTRAINT_COLUMN_USAGE.CONSTRAINT_CATALOGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONSTRAINT_SCHEMANull() {
                return this.IsNull(this.tableCONSTRAINT_COLUMN_USAGE.CONSTRAINT_SCHEMAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONSTRAINT_SCHEMANull() {
                this[this.tableCONSTRAINT_COLUMN_USAGE.CONSTRAINT_SCHEMAColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SCHEMATARow : global::System.Data.DataRow {
            
            private SCHEMATADataTable tableSCHEMATA;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SCHEMATARow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSCHEMATA = ((SCHEMATADataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATALOG_NAME {
                get {
                    try {
                        return ((string)(this[this.tableSCHEMATA.CATALOG_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATALOG_NAME\' in table \'SCHEMATA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCHEMATA.CATALOG_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCHEMA_NAME {
                get {
                    return ((string)(this[this.tableSCHEMATA.SCHEMA_NAMEColumn]));
                }
                set {
                    this[this.tableSCHEMATA.SCHEMA_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCHEMA_OWNER {
                get {
                    try {
                        return ((string)(this[this.tableSCHEMATA.SCHEMA_OWNERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SCHEMA_OWNER\' in table \'SCHEMATA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCHEMATA.SCHEMA_OWNERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEFAULT_CHARACTER_SET_CATALOG {
                get {
                    try {
                        return ((string)(this[this.tableSCHEMATA.DEFAULT_CHARACTER_SET_CATALOGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEFAULT_CHARACTER_SET_CATALOG\' in table \'SCHEMATA\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableSCHEMATA.DEFAULT_CHARACTER_SET_CATALOGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEFAULT_CHARACTER_SET_SCHEMA {
                get {
                    try {
                        return ((string)(this[this.tableSCHEMATA.DEFAULT_CHARACTER_SET_SCHEMAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEFAULT_CHARACTER_SET_SCHEMA\' in table \'SCHEMATA\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableSCHEMATA.DEFAULT_CHARACTER_SET_SCHEMAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEFAULT_CHARACTER_SET_NAME {
                get {
                    try {
                        return ((string)(this[this.tableSCHEMATA.DEFAULT_CHARACTER_SET_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEFAULT_CHARACTER_SET_NAME\' in table \'SCHEMATA\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSCHEMATA.DEFAULT_CHARACTER_SET_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATALOG_NAMENull() {
                return this.IsNull(this.tableSCHEMATA.CATALOG_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATALOG_NAMENull() {
                this[this.tableSCHEMATA.CATALOG_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSCHEMA_OWNERNull() {
                return this.IsNull(this.tableSCHEMATA.SCHEMA_OWNERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSCHEMA_OWNERNull() {
                this[this.tableSCHEMATA.SCHEMA_OWNERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEFAULT_CHARACTER_SET_CATALOGNull() {
                return this.IsNull(this.tableSCHEMATA.DEFAULT_CHARACTER_SET_CATALOGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEFAULT_CHARACTER_SET_CATALOGNull() {
                this[this.tableSCHEMATA.DEFAULT_CHARACTER_SET_CATALOGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEFAULT_CHARACTER_SET_SCHEMANull() {
                return this.IsNull(this.tableSCHEMATA.DEFAULT_CHARACTER_SET_SCHEMAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEFAULT_CHARACTER_SET_SCHEMANull() {
                this[this.tableSCHEMATA.DEFAULT_CHARACTER_SET_SCHEMAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEFAULT_CHARACTER_SET_NAMENull() {
                return this.IsNull(this.tableSCHEMATA.DEFAULT_CHARACTER_SET_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEFAULT_CHARACTER_SET_NAMENull() {
                this[this.tableSCHEMATA.DEFAULT_CHARACTER_SET_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DBObjPropertiesRow : global::System.Data.DataRow {
            
            private DBObjPropertiesDataTable tableDBObjProperties;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DBObjPropertiesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDBObjProperties = ((DBObjPropertiesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string objtype {
                get {
                    try {
                        return ((string)(this[this.tableDBObjProperties.objtypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'objtype\' in table \'DBObjProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDBObjProperties.objtypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string objname {
                get {
                    try {
                        return ((string)(this[this.tableDBObjProperties.objnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'objname\' in table \'DBObjProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDBObjProperties.objnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    return ((string)(this[this.tableDBObjProperties.nameColumn]));
                }
                set {
                    this[this.tableDBObjProperties.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public object value {
                get {
                    try {
                        return ((object)(this[this.tableDBObjProperties.valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'value\' in table \'DBObjProperties\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDBObjProperties.valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsobjtypeNull() {
                return this.IsNull(this.tableDBObjProperties.objtypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetobjtypeNull() {
                this[this.tableDBObjProperties.objtypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsobjnameNull() {
                return this.IsNull(this.tableDBObjProperties.objnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetobjnameNull() {
                this[this.tableDBObjProperties.objnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsvalueNull() {
                return this.IsNull(this.tableDBObjProperties.valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetvalueNull() {
                this[this.tableDBObjProperties.valueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EntitiesRowChangeEvent : global::System.EventArgs {
            
            private EntitiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitiesRowChangeEvent(EntitiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FieldDefinitionsRowChangeEvent : global::System.EventArgs {
            
            private FieldDefinitionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldDefinitionsRowChangeEvent(FieldDefinitionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldDefinitionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ChildRelationsRowChangeEvent : global::System.EventArgs {
            
            private ChildRelationsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChildRelationsRowChangeEvent(ChildRelationsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChildRelationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ForeignRelationsRowChangeEvent : global::System.EventArgs {
            
            private ForeignRelationsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignRelationsRowChangeEvent(ForeignRelationsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ForeignRelationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KeyInfoRowChangeEvent : global::System.EventArgs {
            
            private KeyInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyInfoRowChangeEvent(KeyInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KeyInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TABLE_CONSTRAINTSRowChangeEvent : global::System.EventArgs {
            
            private TABLE_CONSTRAINTSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TABLE_CONSTRAINTSRowChangeEvent(TABLE_CONSTRAINTSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TABLE_CONSTRAINTSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CONSTRAINT_COLUMN_USAGERowChangeEvent : global::System.EventArgs {
            
            private CONSTRAINT_COLUMN_USAGERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSTRAINT_COLUMN_USAGERowChangeEvent(CONSTRAINT_COLUMN_USAGERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONSTRAINT_COLUMN_USAGERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SCHEMATARowChangeEvent : global::System.EventArgs {
            
            private SCHEMATARow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCHEMATARowChangeEvent(SCHEMATARow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SCHEMATARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DBObjPropertiesRowChangeEvent : global::System.EventArgs {
            
            private DBObjPropertiesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBObjPropertiesRowChangeEvent(DBObjPropertiesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DBObjPropertiesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace CodeGenerator.BL.DBReader.DS.SchemaReaderTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EntitiesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EntitiesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Entities";
            tableMapping.ColumnMappings.Add("TABLE_CATALOG", "TABLE_CATALOG");
            tableMapping.ColumnMappings.Add("TABLE_SCHEMA", "TABLE_SCHEMA");
            tableMapping.ColumnMappings.Add("TABLE_NAME", "TABLE_NAME");
            tableMapping.ColumnMappings.Add("TABLE_TYPE", "TABLE_TYPE");
            tableMapping.ColumnMappings.Add("OBJECT_ID", "OBJECT_ID");
            tableMapping.ColumnMappings.Add("schemaname", "schemaname");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CodeGenerator.Properties.Settings.Default.MenuMasterConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "\r\n                      ;WITH schemas(schemaname, remain)\r\n                      " +
                "as (\r\n                      SELECT    left(@schmas , isnull(nullif(CHARINDEX(\',\'" +
                ",@schmas),0),len(@schmas)+1)-1)\r\n                      as schemaname\r\n          " +
                "            ,  right(@schmas, len(@schmas) - isnull(nullif(CHARINDEX(\',\',@schmas" +
                "),0),len(@schmas)) )\r\n                      as remain\r\n                      UNI" +
                "ON  ALL\r\n                      SELECT left(schemas.remain , isnull(nullif(CHARIN" +
                "DEX(\',\',schemas.remain),0),len(schemas.remain)+1)-1)\r\n                      as s" +
                "chemaname\r\n                      ,  right(schemas.remain, len(schemas.remain) - " +
                "isnull(nullif(CHARINDEX(\',\',schemas.remain),0),len(schemas.remain)) )\r\n         " +
                "             as remain\r\n                      FROM schemas Where isnull(len(sche" +
                "mas.remain),0) > 0\r\n                      )\r\n                      , TableList (" +
                "TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE, schemaname)\r\n              " +
                "        AS (\r\n                      SELECT     TABLE_CATALOG\r\n                  " +
                "    ,TABLE_SCHEMA\r\n                      , TABLE_NAME\r\n                      ,TA" +
                "BLE_TYPE\r\n                      ,schemas.schemaname\r\n                      FROM " +
                "     INFORMATION_SCHEMA.TABLES tabs\r\n                      INNER JOIN schemas on" +
                " schemas.schemaname = tabs.TABLE_SCHEMA\r\n                      WHERE ( isnull(@i" +
                "ncludeTable,1) = 1 AND TABLE_TYPE = \'BASE TABLE\')\r\n                      or ( is" +
                "null(@includeView,0) = 1 AND TABLE_TYPE = \'VIEW\')\r\n                      )\r\n    " +
                "                  , Result\r\n                      as (\r\n                      Se" +
                "lect TABLE_CATALOG\r\n                      ,TABLE_SCHEMA\r\n                      ," +
                "TABLE_NAME\r\n                      ,TABLE_TYPE\r\n\r\n                      , scheman" +
                "ame\r\n                      from TableList\r\n                      UNION\r\n        " +
                "              select pkTabs.TABLE_CATALOG\r\n                      , pkTabs.TABLE_" +
                "SCHEMA\r\n                      ,  pkTabs.TABLE_NAME\r\n                      ,  \'BA" +
                "SE TABLE\' TABLE_TYPE\r\n                      , pkTabs.TABLE_SCHEMA\r\n             " +
                "         FROM [INFORMATION_SCHEMA].[REFERENTIAL_CONSTRAINTS] refs\r\n             " +
                "         inner join [INFORMATION_SCHEMA].[TABLE_CONSTRAINTS] pkTabs on refs.UNIQ" +
                "UE_CONSTRAINT_NAME = pkTabs.CONSTRAINT_NAME\r\n                      inner join [I" +
                "NFORMATION_SCHEMA].[TABLE_CONSTRAINTS] fkTabs on refs.CONSTRAINT_NAME = fkTabs.C" +
                "ONSTRAINT_NAME\r\n                      INNER JOIN TableList tl ON tl.TABLE_CATALO" +
                "G = fkTabs.TABLE_CATALOG AND tl.TABLE_SCHEMA = fkTabs.TABLE_SCHEMA AND tl.TABLE_" +
                "NAME = fkTabs.TABLE_NAME\r\n                      Where ISNULL(@includeFK, 0) = 1\r" +
                "\n                      )\r\n                      Select TABLE_CATALOG\r\n          " +
                "            , TABLE_SCHEMA\r\n                      , TABLE_NAME\r\n                " +
                "      , \'BASE TABLE\' TABLE_TYPE\r\n                      , convert(varchar(55),new" +
                "id()) AS OBJECT_ID\r\n                      , TABLE_SCHEMA\r\n                      " +
                "FROM Result\r\n                    ";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@includeTable", global::System.Data.SqlDbType.Bit, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@includeView", global::System.Data.SqlDbType.Bit, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@includeFK", global::System.Data.SqlDbType.Bit, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@schmas", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SchemaReader.EntitiesDataTable dataTable, bool includeTable, bool includeView, bool includeFK, string schmas) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((bool)(includeTable));
            this.Adapter.SelectCommand.Parameters[1].Value = ((bool)(includeView));
            this.Adapter.SelectCommand.Parameters[2].Value = ((bool)(includeFK));
            if ((schmas == null)) {
                throw new global::System.ArgumentNullException("schmas");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(schmas));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SchemaReader.EntitiesDataTable GetData(bool includeTable, bool includeView, bool includeFK, string schmas) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((bool)(includeTable));
            this.Adapter.SelectCommand.Parameters[1].Value = ((bool)(includeView));
            this.Adapter.SelectCommand.Parameters[2].Value = ((bool)(includeFK));
            if ((schmas == null)) {
                throw new global::System.ArgumentNullException("schmas");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(schmas));
            }
            SchemaReader.EntitiesDataTable dataTable = new SchemaReader.EntitiesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FieldDefinitionsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FieldDefinitionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FieldDefinitions";
            tableMapping.ColumnMappings.Add("table_name", "table_name");
            tableMapping.ColumnMappings.Add("column_name", "column_name");
            tableMapping.ColumnMappings.Add("Column_Default", "Column_Default");
            tableMapping.ColumnMappings.Add("is_nullable", "is_nullable");
            tableMapping.ColumnMappings.Add("Data_type", "Data_type");
            tableMapping.ColumnMappings.Add("length", "length");
            tableMapping.ColumnMappings.Add("Relationship", "Relationship");
            tableMapping.ColumnMappings.Add("category", "category");
            tableMapping.ColumnMappings.Add("object_id", "object_id");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CodeGenerator.Properties.Settings.Default.MenuMasterConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select col.table_name, col.column_name,col.Column_Default,col.is_nullable, col.Data_type
      ,case when col.data_type = 'int' or col.data_type = 'datetime' then col.Numeric_precision else col.Character_maximum_length end as length
      , pk.constraint_Name as Relationship
	,CASE WHEN CHARINDEX('_', col.column_name ) > 0 THEN SUBSTRING(col.column_name,0,CHARINDEX('_', col.column_name )) ELSE 'Default' END as category, newid() as object_id
from  INFORMATION_SCHEMA.Columns col
left Outer join INFORMATION_SCHEMA.KEY_COLUMN_USAGE pk on col.column_Name = pk.column_Name and col.Table_name = pk.Table_name and( pk.constraint_name like 'PK%' or pk.constraint_name like 'FK%') 
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"select col.table_name, col.column_name,col.Column_Default,col.is_nullable, col.Data_type
      ,case when col.data_type = 'int' or col.data_type = 'datetime' then col.Numeric_precision else col.Character_maximum_length end as length
      , pk.constraint_Name as Relationship
	,CASE WHEN CHARINDEX('_', col.column_name ) > 0 THEN SUBSTRING(col.column_name,0,CHARINDEX('_', col.column_name )) ELSE 'Default' END as category
, newid() as object_id
from  INFORMATION_SCHEMA.Columns col
left Outer join INFORMATION_SCHEMA.KEY_COLUMN_USAGE pk on col.column_Name = pk.column_Name 
                                                      and col.Table_name = pk.Table_name 
                                                      and col.Table_schema = pk.Table_schema 
                                                      and( pk.constraint_name like 'PK%' or pk.constraint_name like 'FK%') 
 Where col.table_name = @tableName
";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tableName", global::System.Data.SqlDbType.NVarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "TABLE_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SchemaReader.FieldDefinitionsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SchemaReader.FieldDefinitionsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SchemaReader.FieldDefinitionsDataTable dataTable = new SchemaReader.FieldDefinitionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByTableName(SchemaReader.FieldDefinitionsDataTable dataTable, string tableName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((tableName == null)) {
                throw new global::System.ArgumentNullException("tableName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tableName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SchemaReader.FieldDefinitionsDataTable GetDataByTableName(string tableName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((tableName == null)) {
                throw new global::System.ArgumentNullException("tableName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tableName));
            }
            SchemaReader.FieldDefinitionsDataTable dataTable = new SchemaReader.FieldDefinitionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ChildRelationsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ChildRelationsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ChildRelations";
            tableMapping.ColumnMappings.Add("FTable", "FTable");
            tableMapping.ColumnMappings.Add("FCol", "FCol");
            tableMapping.ColumnMappings.Add("RefTab", "RefTab");
            tableMapping.ColumnMappings.Add("RefCol", "RefCol");
            tableMapping.ColumnMappings.Add("isNullable", "isNullable");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CodeGenerator.Properties.Settings.Default.MenuMasterConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT SO1.name AS FTable, SC1.name AS FCol, SO2.name AS RefTab, SC2.name AS RefCol, SC1.isNullable
			FROM dbo.sysforeignkeys FK 
			INNER JOIN dbo.syscolumns SC1 ON FK.fkeyid = SC1.id  AND FK.fkey = SC1.colid  
			INNER JOIN dbo.syscolumns SC2 ON FK.rkeyid = SC2.id  AND FK.rkey = SC2.colid  
			INNER JOIN dbo.sysobjects SO1 ON FK.fkeyid = SO1.id 
			INNER JOIN dbo.sysobjects SO2 ON FK.rkeyid = SO2.id 

";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT SO1.name AS FTable, SC1.name AS FCol, SO2.name AS RefTab, SC2.name AS RefCol, SC1.isNullable
			FROM dbo.sysforeignkeys FK 
			INNER JOIN dbo.syscolumns SC1 ON FK.fkeyid = SC1.id  AND FK.fkey = SC1.colid  
			INNER JOIN dbo.syscolumns SC2 ON FK.rkeyid = SC2.id  AND FK.rkey = SC2.colid  
			INNER JOIN dbo.sysobjects SO1 ON FK.fkeyid = SO1.id 
			INNER JOIN dbo.sysobjects SO2 ON FK.rkeyid = SO2.id 
			WHERE SO2.Name =@tableName
";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tableName", global::System.Data.SqlDbType.NVarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "RefTab", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SchemaReader.ChildRelationsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SchemaReader.ChildRelationsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SchemaReader.ChildRelationsDataTable dataTable = new SchemaReader.ChildRelationsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByTableName(SchemaReader.ChildRelationsDataTable dataTable, string tableName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((tableName == null)) {
                throw new global::System.ArgumentNullException("tableName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tableName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SchemaReader.ChildRelationsDataTable GetDataByTableName(string tableName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((tableName == null)) {
                throw new global::System.ArgumentNullException("tableName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tableName));
            }
            SchemaReader.ChildRelationsDataTable dataTable = new SchemaReader.ChildRelationsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ForeignRelationsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ForeignRelationsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ForeignRelations";
            tableMapping.ColumnMappings.Add("FTable", "FTable");
            tableMapping.ColumnMappings.Add("FCol", "FCol");
            tableMapping.ColumnMappings.Add("RefTab", "RefTab");
            tableMapping.ColumnMappings.Add("RefCol", "RefCol");
            tableMapping.ColumnMappings.Add("isNullable", "isNullable");
            tableMapping.ColumnMappings.Add("ConstraintName", "ConstraintName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CodeGenerator.Properties.Settings.Default.MenuMasterConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT SO1.name AS FTable, SC1.name AS FCol, SO2.name AS RefTab, SC2.name AS RefCol
, SC1.isNullable,cstName.Name AS ConstraintName
FROM dbo.sysforeignkeys FK 
INNER JOIN dbo.syscolumns SC1 ON FK.fkeyid = SC1.id  AND FK.fkey = SC1.colid  
INNER JOIN dbo.syscolumns SC2 ON FK.rkeyid = SC2.id  AND FK.rkey = SC2.colid  
INNER JOIN dbo.sysobjects SO1 ON FK.fkeyid = SO1.id 
INNER JOIN dbo.sysobjects SO2 ON FK.rkeyid = SO2.id 
inner join dbo.sysobjects cstName  on cstName.id  = FK.constid
";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"SELECT SO1.name AS FTable, SC1.name AS FCol, SO2.name AS RefTab, SC2.name AS RefCol
, SC1.isNullable,cstName.Name AS ConstraintName
FROM dbo.sysforeignkeys FK 
INNER JOIN dbo.syscolumns SC1 ON FK.fkeyid = SC1.id  AND FK.fkey = SC1.colid  
INNER JOIN dbo.syscolumns SC2 ON FK.rkeyid = SC2.id  AND FK.rkey = SC2.colid  
INNER JOIN dbo.sysobjects SO1 ON FK.fkeyid = SO1.id 
INNER JOIN dbo.sysobjects SO2 ON FK.rkeyid = SO2.id 
inner join dbo.sysobjects cstName  on cstName.id  = FK.constid
WHERE SO1.Name = @tableName";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tableName", global::System.Data.SqlDbType.NVarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "FTable", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT SO1.name AS FTable, SO2.name AS RefTab,cstName.Name AS ConstraintName
FROM dbo.sysforeignkeys FK 
INNER JOIN dbo.syscolumns SC1 ON FK.fkeyid = SC1.id  AND FK.fkey = SC1.colid  
INNER JOIN dbo.syscolumns SC2 ON FK.rkeyid = SC2.id  AND FK.rkey = SC2.colid  
INNER JOIN dbo.sysobjects SO1 ON FK.fkeyid = SO1.id 
INNER JOIN dbo.sysobjects SO2 ON FK.rkeyid = SO2.id 
inner join dbo.sysobjects cstName  on cstName.id  = FK.constid
WHERE SO2.Name = @TableName
group by SO1.name , SO2.name,cstName.Name";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TableName", global::System.Data.SqlDbType.NVarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "RefTab", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SchemaReader.ForeignRelationsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SchemaReader.ForeignRelationsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SchemaReader.ForeignRelationsDataTable dataTable = new SchemaReader.ForeignRelationsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(SchemaReader.ForeignRelationsDataTable dataTable, string tableName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((tableName == null)) {
                throw new global::System.ArgumentNullException("tableName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tableName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SchemaReader.ForeignRelationsDataTable GetDataBy(string tableName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((tableName == null)) {
                throw new global::System.ArgumentNullException("tableName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tableName));
            }
            SchemaReader.ForeignRelationsDataTable dataTable = new SchemaReader.ForeignRelationsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByAllChildTablesOnly(SchemaReader.ForeignRelationsDataTable dataTable, string TableName) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((TableName == null)) {
                throw new global::System.ArgumentNullException("TableName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(TableName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SchemaReader.ForeignRelationsDataTable GetDataByAllChildTablesOnly(string TableName) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((TableName == null)) {
                throw new global::System.ArgumentNullException("TableName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(TableName));
            }
            SchemaReader.ForeignRelationsDataTable dataTable = new SchemaReader.ForeignRelationsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class KeyInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public KeyInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "KeyInfo";
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("id", "id");
            tableMapping.ColumnMappings.Add("xtype", "xtype");
            tableMapping.ColumnMappings.Add("parent_obj", "parent_obj");
            tableMapping.ColumnMappings.Add("type", "type");
            tableMapping.ColumnMappings.Add("TableName", "TableName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CodeGenerator.Properties.Settings.Default.MenuMasterConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     SC1.name, SC1.id, SC1.xtype, SC1.parent_obj, SC1.type, PO.name AS Tabl" +
                "eName\r\nFROM         sys.sysobjects AS SC1 INNER JOIN\r\n                      sys." +
                "sysobjects AS PO ON SC1.parent_obj = PO.id\r\nWHERE     (SC1.type = \'k\')";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillKeyColumnInfo(SchemaReader.KeyInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SchemaReader.KeyInfoDataTable GetDataKeyColumnInfo() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SchemaReader.KeyInfoDataTable dataTable = new SchemaReader.KeyInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TABLE_CONSTRAINTSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TABLE_CONSTRAINTSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TABLE_CONSTRAINTS";
            tableMapping.ColumnMappings.Add("CONSTRAINT_CATALOG", "CONSTRAINT_CATALOG");
            tableMapping.ColumnMappings.Add("CONSTRAINT_SCHEMA", "CONSTRAINT_SCHEMA");
            tableMapping.ColumnMappings.Add("CONSTRAINT_NAME", "CONSTRAINT_NAME");
            tableMapping.ColumnMappings.Add("TABLE_CATALOG", "TABLE_CATALOG");
            tableMapping.ColumnMappings.Add("TABLE_SCHEMA", "TABLE_SCHEMA");
            tableMapping.ColumnMappings.Add("TABLE_NAME", "TABLE_NAME");
            tableMapping.ColumnMappings.Add("CONSTRAINT_TYPE", "CONSTRAINT_TYPE");
            tableMapping.ColumnMappings.Add("IS_DEFERRABLE", "IS_DEFERRABLE");
            tableMapping.ColumnMappings.Add("INITIALLY_DEFERRED", "INITIALLY_DEFERRED");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CodeGenerator.Properties.Settings.Default.MenuMasterConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "select * from INFORMATION_SCHEMA.TABLE_CONSTRAINTS\r\n";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "select * from INFORMATION_SCHEMA.TABLE_CONSTRAINTS\r\nWHERE TABLE_NAME = @tableName" +
                "";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tableName", global::System.Data.SqlDbType.NVarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "TABLE_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillContraints(SchemaReader.TABLE_CONSTRAINTSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SchemaReader.TABLE_CONSTRAINTSDataTable GetDataContraints() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SchemaReader.TABLE_CONSTRAINTSDataTable dataTable = new SchemaReader.TABLE_CONSTRAINTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByTableName(SchemaReader.TABLE_CONSTRAINTSDataTable dataTable, string tableName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((tableName == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tableName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SchemaReader.TABLE_CONSTRAINTSDataTable GetDataByTableName(string tableName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((tableName == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tableName));
            }
            SchemaReader.TABLE_CONSTRAINTSDataTable dataTable = new SchemaReader.TABLE_CONSTRAINTSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CONSTRAINT_COLUMN_USAGETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CONSTRAINT_COLUMN_USAGETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CONSTRAINT_COLUMN_USAGE";
            tableMapping.ColumnMappings.Add("TABLE_CATALOG", "TABLE_CATALOG");
            tableMapping.ColumnMappings.Add("TABLE_SCHEMA", "TABLE_SCHEMA");
            tableMapping.ColumnMappings.Add("TABLE_NAME", "TABLE_NAME");
            tableMapping.ColumnMappings.Add("COLUMN_NAME", "COLUMN_NAME");
            tableMapping.ColumnMappings.Add("CONSTRAINT_CATALOG", "CONSTRAINT_CATALOG");
            tableMapping.ColumnMappings.Add("CONSTRAINT_SCHEMA", "CONSTRAINT_SCHEMA");
            tableMapping.ColumnMappings.Add("CONSTRAINT_NAME", "CONSTRAINT_NAME");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CodeGenerator.Properties.Settings.Default.MenuMasterConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "select * from INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "select * from INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE Where Constraint_Name = " +
                "@ConstraintName";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConstraintName", global::System.Data.SqlDbType.NVarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "CONSTRAINT_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SchemaReader.CONSTRAINT_COLUMN_USAGEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SchemaReader.CONSTRAINT_COLUMN_USAGEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SchemaReader.CONSTRAINT_COLUMN_USAGEDataTable dataTable = new SchemaReader.CONSTRAINT_COLUMN_USAGEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByConstraintName(SchemaReader.CONSTRAINT_COLUMN_USAGEDataTable dataTable, string ConstraintName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ConstraintName == null)) {
                throw new global::System.ArgumentNullException("ConstraintName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ConstraintName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SchemaReader.CONSTRAINT_COLUMN_USAGEDataTable GetDataByConstraintName(string ConstraintName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((ConstraintName == null)) {
                throw new global::System.ArgumentNullException("ConstraintName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(ConstraintName));
            }
            SchemaReader.CONSTRAINT_COLUMN_USAGEDataTable dataTable = new SchemaReader.CONSTRAINT_COLUMN_USAGEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SCHEMATATableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SCHEMATATableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SCHEMATA";
            tableMapping.ColumnMappings.Add("CATALOG_NAME", "CATALOG_NAME");
            tableMapping.ColumnMappings.Add("SCHEMA_NAME", "SCHEMA_NAME");
            tableMapping.ColumnMappings.Add("SCHEMA_OWNER", "SCHEMA_OWNER");
            tableMapping.ColumnMappings.Add("DEFAULT_CHARACTER_SET_CATALOG", "DEFAULT_CHARACTER_SET_CATALOG");
            tableMapping.ColumnMappings.Add("DEFAULT_CHARACTER_SET_SCHEMA", "DEFAULT_CHARACTER_SET_SCHEMA");
            tableMapping.ColumnMappings.Add("DEFAULT_CHARACTER_SET_NAME", "DEFAULT_CHARACTER_SET_NAME");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CodeGenerator.Properties.Settings.Default.MenuMasterConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CATALOG_NAME, SCHEMA_NAME, SCHEMA_OWNER, DEFAULT_CHARACTER_SET_CATALOG, DE" +
                "FAULT_CHARACTER_SET_SCHEMA, \r\n               DEFAULT_CHARACTER_SET_NAME\r\nFROM  I" +
                "NFORMATION_SCHEMA.SCHEMATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SchemaReader.SCHEMATADataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SchemaReader.SCHEMATADataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            SchemaReader.SCHEMATADataTable dataTable = new SchemaReader.SCHEMATADataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DBObjPropertiesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DBObjPropertiesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DBObjProperties";
            tableMapping.ColumnMappings.Add("objtype", "objtype");
            tableMapping.ColumnMappings.Add("objname", "objname");
            tableMapping.ColumnMappings.Add("name", "name");
            tableMapping.ColumnMappings.Add("value", "value");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::CodeGenerator.Properties.Settings.Default.MenuMasterConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT objtype, objname, name, value\r\nFROM fn_listextendedproperty (@propName, @l" +
                "vl1Type, @lvl1Name, @objType, @objName, @lvl3Type, @lvl3Name);";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@propName", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lvl1Type", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lvl1Name", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@objType", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@objName", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lvl3Type", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lvl3Name", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(SchemaReader.DBObjPropertiesDataTable dataTable, string propName, string lvl1Type, string lvl1Name, string objType, string objName, string lvl3Type, string lvl3Name) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((propName == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(propName));
            }
            if ((lvl1Type == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(lvl1Type));
            }
            if ((lvl1Name == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(lvl1Name));
            }
            if ((objType == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(objType));
            }
            if ((objName == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(objName));
            }
            if ((lvl3Type == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(lvl3Type));
            }
            if ((lvl3Name == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(lvl3Name));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SchemaReader.DBObjPropertiesDataTable GetData(string propName, string lvl1Type, string lvl1Name, string objType, string objName, string lvl3Type, string lvl3Name) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((propName == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(propName));
            }
            if ((lvl1Type == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(lvl1Type));
            }
            if ((lvl1Name == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(lvl1Name));
            }
            if ((objType == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(objType));
            }
            if ((objName == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(objName));
            }
            if ((lvl3Type == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(lvl3Type));
            }
            if ((lvl3Name == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(lvl3Name));
            }
            SchemaReader.DBObjPropertiesDataTable dataTable = new SchemaReader.DBObjPropertiesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
}

#pragma warning restore 1591